#     ðŸ”¹ What is set_fact?
# The set_fact module is used to define variables dynamically during playbook execution.
# Unlike normal variables (defined in vars: or inventory), facts set with set_fact are host-specific and last until the end of the play.
# These facts can also be used in later tasks just like any other variable.
# ðŸ”¹ Common Use Cases
# Store dynamic values (e.g., based on conditions).
# Use registered variables to compute new facts.
# Control flow (e.g., when: conditions).
# Reuse computed results across tasks.

# ðŸ”¹ Example 1 â€“ Simple Variable
- name: Example of set_fact
  hosts: all
  tasks:
    - name: Set a custom fact
      ansible.builtin.set_fact:
        my_message: "Hello from {{ inventory_hostname }}"

    - name: Display the fact
      debug:
        msg: "{{ my_message }}"


# âœ… Output will be different for each host.

# ðŸ”¹ Example 2 â€“ Using Conditions
- name: Example with conditions
  hosts: all
  tasks:
    - name: Set OS-specific fact
      ansible.builtin.set_fact:
        package_manager: "{{ 'apt' if ansible_facts['os_family'] == 'Debian' else 'yum' }}"

    - name: Show which package manager will be used
      debug:
        msg: "This host uses {{ package_manager }}"


# âœ… Dynamically selects apt or yum based on OS.

# ðŸ”¹ Example 3 â€“ Combine with Registered Variables
- name: Example with registered var
  hosts: all
  tasks:
    - name: Check uptime
      command: uptime -p
      register: uptime_result

    - name: Save uptime as a fact
      ansible.builtin.set_fact:
        server_uptime: "{{ uptime_result.stdout }}"

    - name: Print the saved fact
      debug:
        msg: "Host {{ inventory_hostname }} uptime: {{ server_uptime }}"


# âœ… Stores command output into a fact for later reuse.

# ðŸ”¹ Example 4 â€“ Accumulate Values Across Loop
- name: Accumulate a list with set_fact
  hosts: all
  tasks:
    - name: Initialize empty list
      ansible.builtin.set_fact:
        my_list: []

    - name: Add items to list
      ansible.builtin.set_fact:
        my_list: "{{ my_list + [ item ] }}"
      loop:
        - apple
        - banana
        - cherry

    - name: Show final list
      debug:
        msg: "My list is: {{ my_list }}"


# âœ… Output â†’ ['apple', 'banana', 'cherry']
