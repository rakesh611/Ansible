🔹 What is the package module?

It is a generic interface for package management.

It automatically uses the correct package manager on the target system:

yum / dnf → RedHat, CentOS, Rocky, AlmaLinux

apt → Debian, Ubuntu

zypper → SUSE

pkg → FreeBSD

Ensures idempotency: if the package is already in the desired state, nothing changes.

🔹 Key Parameters

name: Package name(s) to manage (string or list).

state: Desired state of the package. Common values:

present → Ensure installed

latest → Ensure latest version

absent → Ensure removed

use: Force a specific package manager (yum, apt, dnf, etc.).

update_cache: Refresh package repo metadata before installing (like apt-get update).

🔹 Example Playbooks
1. Install a single package
---
- name: Install httpd (Apache) on any OS
  hosts: all
  become: true
  tasks:
    - name: Ensure Apache is installed
      ansible.builtin.package:
        name: httpd
        state: present


👉 On RHEL/CentOS, this installs httpd.
👉 On Ubuntu/Debian, it would try to install httpd (but actual package name is apache2).

2. Install multiple packages
---
- name: Install multiple packages
  hosts: all
  become: true
  tasks:
    - name: Ensure dev tools are installed
      ansible.builtin.package:
        name:
          - git
          - curl
          - vim
        state: present

3. Update package to the latest version
---
- name: Update nginx to latest version
  hosts: all
  become: true
  tasks:
    - name: Ensure nginx is latest
      ansible.builtin.package:
        name: nginx
        state: latest

4. Remove a package
---
- name: Remove telnet if present
  hosts: all
  become: true
  tasks:
    - name: Ensure telnet is absent
      ansible.builtin.package:
        name: telnet
        state: absent

5. Install using specific package manager
---
- name: Install package with explicit manager
  hosts: all
  become: true
  tasks:
    - name: Install tree using yum
      ansible.builtin.package:
        name: tree
        state: present
        use: yum

🔹 When to use package vs apt / yum

✅ Use package if you want cross-platform portability.

✅ Use apt / yum / dnf if you need distro-specific options (like repo, gpg keys, cache control).

🔹 Comparison: package vs apt vs yum vs dnf
| Feature / Module                      | `package` (Generic)          | `apt` (Debian/Ubuntu)     | `yum` (RHEL ≤7, CentOS)  | `dnf` (RHEL 8+, Fedora, Rocky) |
| ------------------------------------- | ---------------------------- | ------------------------- | ------------------------ | ------------------------------ |
| **Cross-platform**                    | ✅ Yes (auto-detects manager) | ❌ No (Debian/Ubuntu only) | ❌ No (RHEL ≤7 only)      | ❌ No (RHEL 8+ only)            |
| **Basic ops (install/remove/update)** | ✅ Yes                        | ✅ Yes                     | ✅ Yes                    | ✅ Yes                          |
| **Update package cache**              | ❌ No                         | ✅ `update_cache: yes`     | ✅ `update_cache: yes`    | ✅ `update_cache: yes`          |
| **Install from `.deb` / `.rpm` file** | ❌ No                         | ✅ (supports `.deb`)       | ✅ (supports `.rpm`)      | ✅ (supports `.rpm`)            |
| **Enable/disable repo**               | ❌ No                         | ✅ (via `apt_repository`)  | ✅ (via `yum_repository`) | ✅ (via `dnf`)                  |
| **Security updates only**             | ❌ No                         | ✅ Yes (`only_upgrade`)    | ✅ Yes (`security: yes`)  | ✅ Yes (`security: yes`)        |
| **Best for portability?**             | ✅ Yes                        | ❌ No                      | ❌ No                     | ❌ No                           |

