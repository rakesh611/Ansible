#            🔹 slurp Module – Explanation
# Purpose:
# Reads a binary-safe file from a remote host and returns it as base64-encoded content to the controller (where Ansible runs).
# Common Uses:
# Fetch config/log files from remote servers for inspection.
# Collect small files across many hosts for auditing.
# Read SSL certificates, JSON/YAML configs, or secret keys.
# ⚠️ Note:
# slurp is good for small/medium files.
# For large files, use fetch (writes directly to disk).
# 🔹 Return Values
# When you register the result of slurp, you usually get:
# content: Base64-encoded content of the file.
# encoding: Always base64.
# source: The path you requested.
# checksum: Checksum of the file.
# 👉 You’ll often need to use the b64decode filter to convert it back to readable text.
#             🔹 Example Playbooks
# 1. Read /etc/hosts from remote host
---
- name: Slurp a remote file
  hosts: all
  tasks:
    - name: Read /etc/hosts
      ansible.builtin.slurp:
        src: /etc/hosts
      register: hosts_file

    - name: Show decoded content
      ansible.builtin.debug:
        msg: "{{ hosts_file.content | b64decode }}"


# 👉 Output will display the actual /etc/hosts file contents.

# 2. Save Remote File to Local Controller
- name: Save remote log file locally
  hosts: all
  tasks:
    - name: Slurp log file
      ansible.builtin.slurp:
        src: /var/log/myapp.log
      register: log_content

    - name: Write log to local file
      delegate_to: localhost
      copy:
        content: "{{ log_content.content | b64decode }}"
        dest: "./logs/{{ inventory_hostname }}-myapp.log"


# 👉 This collects logs from multiple hosts and stores them on the Ansible control node.

# 3. Read Remote Secret Key (Binary-Safe)
- name: Fetch SSL private key securely
  hosts: webservers
  tasks:
    - name: Slurp private key
      ansible.builtin.slurp:
        src: /etc/ssl/private/server.key
      register: ssl_key

    - name: Use the key in a template
      ansible.builtin.template:
        src: cert_template.j2
        dest: /etc/myapp/cert.conf
      vars:
        private_key: "{{ ssl_key.content | b64decode }}"


# 👉 Useful for embedding sensitive files inside configs (though be careful with secrets in logs).
