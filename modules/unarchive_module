#        ðŸ”¹ unarchive Module â€“ Explanation
# Purpose: Extracts compressed archive files (.tar, .tar.gz, .tgz, .zip, etc.) on remote machines.

#      Key Features:
# Can copy the archive from local â†’ remote or use an already existing file on remote.
# Supports formats: tar, gz, bz2, xz, zip.
# Can set owner, group, and file permissions.
# Can extract without copying (copy: no â†’ useful if the archive is already on the remote server).

#          ðŸ”¹ Key Parameters
# src: Path to the archive file (local or remote depending on copy).
# dest: Directory where archive should be unpacked (must exist).
# copy:
# yes â†’ Copy file from control node to remote before unpacking.
# no â†’ Use already existing archive on the remote host.
# remote_src: Same as copy: no (newer versions prefer remote_src).
# creates: A file/directory that indicates archive is already unpacked (idempotency).
# owner, group, mode: Permissions for unpacked files.

           ðŸ”¹ Example Playbooks
# 1. Copy and Extract a Local Archive
---
- name: Copy and extract app.tar.gz to /opt
  hosts: all
  become: yes
  tasks:
    - name: Extract tarball
      ansible.builtin.unarchive:
        src: /tmp/app.tar.gz
        dest: /opt/
        remote_src: no


#         ðŸ‘‰ Copies app.tar.gz from control node â†’ remote and extracts into /opt/.
# 2. Extract an Archive Already on Remote
---
- name: Extract archive that already exists on remote server
  hosts: all
  become: yes
  tasks:
    - name: Extract in /usr/local
      ansible.builtin.unarchive:
        src: /usr/local/packages/app.zip
        dest: /usr/local/
        remote_src: yes


#        ðŸ‘‰ No copy, directly extracts existing /usr/local/packages/app.zip.
# 3. Extract and Set Permissions
---
- name: Extract with owner and permissions
  hosts: all
  become: yes
  tasks:
    - name: Extract app with correct ownership
      ansible.builtin.unarchive:
        src: /tmp/myapp.tar.gz
        dest: /opt/myapp/
        remote_src: yes
        owner: appuser
        group: appgroup
        mode: '0755'


#             ðŸ‘‰ Ensures extracted files belong to appuser:appgroup.
# 4. Extract Only If Not Already Done (creates)
---
- name: Extract app only once
  hosts: all
  become: yes
  tasks:
    - name: Extract if marker file does not exist
      ansible.builtin.unarchive:
        src: /tmp/myapp.tar.gz
        dest: /opt/myapp/
        remote_src: yes
        creates: /opt/myapp/bin/start.sh


#      ðŸ‘‰ Extracts only if /opt/myapp/bin/start.sh does not exist â†’ avoids repeated extraction.
# 5. Real-World Example â€“ Deploying a Web App from GitHub Release
---
- name: Deploy web app from GitHub release
  hosts: webservers
  become: yes
  tasks:
    - name: Download latest release
      ansible.builtin.get_url:
        url: https://github.com/myorg/myapp/releases/download/v1.0.0/myapp.tar.gz
        dest: /tmp/myapp.tar.gz

    - name: Extract into /var/www/html
      ansible.builtin.unarchive:
        src: /tmp/myapp.tar.gz
        dest: /var/www/html/
        remote_src: yes
        owner: www-data
        group: www-data


# ðŸ‘‰ Downloads and deploys the web app directly into /var/www/html.
